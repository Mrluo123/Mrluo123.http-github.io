<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>C++用流函数进行格式化输出</title>
    <url>/Mrluo123.http-github.io/post/3482.html</url>
    <content><![CDATA[<p>调试的时候，输出友好的话，可以有效的提高调试的效率，因此，在这里整理一下，一些格式化输出的常见方法。</p>
<span id="more"></span>



<h1 id="1、setf"><a href="#1、setf" class="headerlink" title="1、setf"></a>1、setf</h1><p>stef是set flags(设置标志)的缩写。编制（flags)是以二选一的方式来做一件事情的指令。</p>
<ol>
<li><p>ios::fixed 不用e计数法来表示浮点数</p>
</li>
<li><p>ios::scientific 用e计数法来表示浮点数</p>
</li>
<li><p>ios::showpos 始终以浮点数显示小数点和尾随的0。如果不设置此表示，而且一个数字在小数点后全是0，那么他在输出时可能既没有小数点，也没有尾随的0。</p>
</li>
<li><p>ios::right 在使用成员函数width()来设置域宽值后，输出的时候会按照区域宽度来右对齐输出</p>
</li>
<li><p>ios::left 在使用成员函数width()来设置域宽值后，输出的时候会按照区域宽度来左对齐输出</p>
<p>例子：</p>
</li>
</ol>
<pre class=" language-c++"><code class="language-c++">#include "pch.h"
#include <iostream>
#include<fstream>
#include<cstdlib>
using namespace std;
int main()
{
    float a = 0.00;
    float b = 1234567.23;
    int c = 10;
    cout.width(50);     //设置输出域宽为50
    cout << "Peter is a hansome man" << endl;
    cout.setf(ios::showpoint);   //显示小数点后面位数
    cout << a << endl;
    cout.unsetf(ios::showpoint);//取消上一个格式化输出
    cout.setf(ios::scientific);//科学计数法输出浮点数
    cout << b << endl;
    cout.unsetf(ios::scientific);//取消上一个格式化输出
    cout.setf(ios::fixed);//直接输出浮点数
    cout << b << endl;
    cout.unsetf(ios::fixed);//取消上一个格式化输出
    cout.setf(ios::left);//靠左输出
    cout << b << "	"<< c << endl;
}
</code></pre>
<h1 id="2、setw"><a href="#2、setw" class="headerlink" title="2、setw"></a>2、setw</h1><p>操纵元函数setw()和width()类似：</p>
<pre class=" language-c++"><code class="language-c++">cout<< “strat” << setw(4) << 10;
</code></pre>
<p>输出： 10；在10前面有两个空格，因为是4个域宽输出的。</p>
<h2 id="3、setprecision"><a href="#3、setprecision" class="headerlink" title="3、setprecision"></a>3、setprecision</h2><p>使用<em>setprecision</em>(n)可控制输出流显示浮点数的数字个数:</p>
<pre class=" language-c++"><code class="language-c++">cout<< setprecision(2) << 10.4<< endl;
</code></pre>
<p>输出：10.30</p>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>格式化输出</tag>
      </tags>
  </entry>
  <entry>
    <title>KMC平台基础软件配置方法一览</title>
    <url>/Mrluo123.http-github.io/post/63333.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="1bbddaf015597294917749e42484ac9e445ced6d32052e972129272cd22768bd"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 请在这里键入本文的阅览密码.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/Mrluo123.http-github.io/lib/hbe.js"></script><link href="/Mrluo123.http-github.io/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>数值反应堆</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>SALOME</tag>
        <tag>多尺度多物理耦合</tag>
      </tags>
  </entry>
  <entry>
    <title>CUDA-ubuntu20安装教程</title>
    <url>/Mrluo123.http-github.io/post/199927a1.html</url>
    <content><![CDATA[<h2 id="0-CUDA简介"><a href="#0-CUDA简介" class="headerlink" title="0. CUDA简介"></a>0. CUDA简介</h2><blockquote>
<p>CUDA（Compute Unified Device Architecture，统一计算架构）是由英伟达NVIDIA所推出的一种集成技术，是该公司对于GPGPU的正式名称。透过这个技术，用户可利用NVIDIA的GPU进行图像处理之外的运算，亦是首次可以利用GPU作为C-编译器的开发环境。CUDA 开发包（CUDA Toolkit ）只能将自家的CUDA C-语言，也就是执行于GPU的部分编译成PTX中间语言或是特定NVIDIA GPU架构的机器代码（NVIDIA 官方称为 “device code”）；而执行于中央处理器部分的C / C++代码（NVIDIA 官方称为 “host code”）仍依赖于外部的编译器，如Microsoft Windows下需要Microsoft Visual Studio；Linux下则主要依赖于GCC。</p>
</blockquote>
<blockquote>
<p>在GPUs（GPGPU）上使用图形APIs进行传统通用计算，CUDA技术有下列几个优点：</p>
<ul>
<li>分散读取——代码可以从存储器的任意地址读取</li>
<li>统一虚拟内存（Unified Memory, 从 CUDA 6.0 开始）—— 将所有 CPU 和 GPU 的内存置于统一管理的虚拟内存空间下。</li>
<li>共享存储器（Global Memory）—— 访问快速的区域，使之在多个线程间共享，有效带宽比纹理存储器（Texture Memory）更大。</li>
<li>与GPU之间更快的下载与回读</li>
<li>全面支持整型与位操作，包括整型纹理查找</li>
</ul>
</blockquote>
<h2 id="1-安装步骤"><a href="#1-安装步骤" class="headerlink" title="1. 安装步骤"></a>1. 安装步骤</h2><ol>
<li>Add GPG Key on Ubuntu 20.04</li>
</ol>
<pre class=" language-shell"><code class="language-shell">sudo apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/3bf863cc.pub
</code></pre>
<ol start="2">
<li>Add CUDA Toolkit Repository</li>
</ol>
<pre class=" language-shell"><code class="language-shell">wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/cuda-ubuntu2004.pin
sudo mv cuda-ubuntu2004.pin /etc/apt/preferences.d/cuda-repository-pin-600
#Add the repository
sudo add-apt-repository "deb https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/ /"
</code></pre>
<ol start="3">
<li>Run APT Update</li>
</ol>
<pre class=" language-shell"><code class="language-shell">sudo apt-get update
</code></pre>
<ol start="4">
<li>Install Nvidia CUDA on Ubuntu 20.04</li>
</ol>
<pre class=" language-shell"><code class="language-shell">sudo apt install cuda
#Add the CUDA installed folder in your system path
echo 'export PATH=/usr/local/cuda/bin${PATH:+:${PATH}}' >> ~/.bashrc
source ~/.bashrc
#check the version
nvcc --version
</code></pre>
<h2 id="2-运行你的第一个CUDA程序-HelloWorld"><a href="#2-运行你的第一个CUDA程序-HelloWorld" class="headerlink" title="2. 运行你的第一个CUDA程序-HelloWorld"></a>2. 运行你的第一个CUDA程序-HelloWorld</h2><ol>
<li>Here is the sample of CUDA C code to create your first program:</li>
</ol>
<pre class=" language-shell"><code class="language-shell">gedit helloworld.cu
</code></pre>
<ol start="2">
<li>Paste the following code in the file:</li>
</ol>
<pre class=" language-C++"><code class="language-C++">#include <stdio.h>
__global__
void saxpy(int n, float a, float *x, float *y)
{
int i = blockIdx.x*blockDim.x + threadIdx.x;
if (i < n) y[i] = a*x[i] + y[i];
}
int main(void)
{
int N = 1<<20;
float *x, *y, *d_x, *d_y;
x = (float*)malloc(N*sizeof(float));
y = (float*)malloc(N*sizeof(float));
cudaMalloc(&d_x, N*sizeof(float));
cudaMalloc(&d_y, N*sizeof(float));
for (int i = 0; i < N; i++) {
x[i] = 1.0f;
y[i] = 2.0f;
}
cudaMemcpy(d_x, x, N*sizeof(float), cudaMemcpyHostToDevice);
cudaMemcpy(d_y, y, N*sizeof(float), cudaMemcpyHostToDevice);
// Perform SAXPY on 1M elements
saxpy<<<(N+255)/256, 256>>>(N, 2.0f, d_x, d_y);
cudaMemcpy(y, d_y, N*sizeof(float), cudaMemcpyDeviceToHost);
float maxError = 0.0f;
for (int i = 0; i < N; i++)
maxError = max(maxError, abs(y[i]-4.0f));
printf("Max error: %f\n", maxError);
cudaFree(d_x);
cudaFree(d_y);
free(x);
free(y);
}
</code></pre>
<ol start="3">
<li>Compile your program</li>
</ol>
<pre class=" language-shell"><code class="language-shell">nvcc -o mycuda helloworld.cu
</code></pre>
<ol start="4">
<li>Run your CUDA program</li>
</ol>
<pre class=" language-shell"><code class="language-shell">./mycuda
</code></pre>
<img src="/Mrluo123.http-github.io/post/199927a1/1.png" class="">

<h2 id="3-更多教程"><a href="#3-更多教程" class="headerlink" title="3. 更多教程"></a>3. 更多教程</h2><ul>
<li>NVIDIA CUDA C++ Programming Guide：</li>
<li><a href="https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html">https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html</a></li>
<li>CUDA C++ Best Practices Guide：</li>
<li><a href="https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html">https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html</a></li>
<li>CUDA编程入门极简教程：</li>
<li><a href="https://zhuanlan.zhihu.com/p/34587739">https://zhuanlan.zhihu.com/p/34587739</a></li>
<li>CUDA学习资料-博主推荐：</li>
<li><a href="https://www.cnblogs.com/5long/p/cuda-learning.html">https://www.cnblogs.com/5long/p/cuda-learning.html</a></li>
<li>…</li>
</ul>
]]></content>
      <categories>
        <category>高性能计算</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>CUDA</tag>
        <tag>GPU</tag>
      </tags>
  </entry>
  <entry>
    <title>使用OpenMP进行C++并行编程的一些心得</title>
    <url>/Mrluo123.http-github.io/post/11326.html</url>
    <content><![CDATA[<p>最近在编程时，由于涉及到大量for循环等遍历计算，需要了解并行编程知识，于是看了下OpenMP的相关教程；</p>
<span id="more"></span>
<blockquote>
<p>OpenMP是由OpenMP Architecture Review Board牵头提出的，并已被广泛接受，用于<a href="https://baike.baidu.com/item/%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98/2182364">共享内存</a>并行系统的多处理器程序设计的一套指导性编译处理方案(Compiler Directive) [1] 。OpenMP支持的编程语言包括<a href="https://baike.baidu.com/item/C">C</a>、<a href="https://baike.baidu.com/item/C%2B%2B">C++</a>和<a href="https://baike.baidu.com/item/Fortran">Fortran</a>；而支持OpenMp的<a href="https://baike.baidu.com/item/%E7%BC%96%E8%AF%91%E5%99%A8/8853067">编译器</a>包括Sun Compiler，GNU Compiler和Intel Compiler等。OpenMp提供了对<a href="https://baike.baidu.com/item/%E5%B9%B6%E8%A1%8C%E7%AE%97%E6%B3%95/967188">并行算法</a>的高层的抽象描述，程序员通过在<a href="https://baike.baidu.com/item/%E6%BA%90%E4%BB%A3%E7%A0%81">源代码</a>中加入专用的pragma来指明自己的意图，由此编译器可以自动将程序进行并行化，并在必要之处加入同步互斥以及通信。当选择忽略这些pragma，或者编译器不支持OpenMp时，程序又可退化为通常的程序(一般为<a href="https://baike.baidu.com/item/%E4%B8%B2%E8%A1%8C/3555818">串行</a>)，代码仍然可以正常运作，只是不能利用多线程来加速程序执行。</p>
</blockquote>
<p>在用OpenMP进行并行编程时，只需要加入#pragma omp parallel语句以及后面的操作命令即可，十分简单，便于程序员操作；</p>
<p>下面以vs为例，介绍OpenMP的简单用法：</p>
<p>1、首先，新建项目并添加代码后，需要打开vs的OpenMP支持选项：<strong>右键项目属性-C/C+±语言-OpenMP支持</strong></p>
<img src="/Mrluo123.http-github.io/post/11326/1.jpg" class="" width="500" height="500">
<p><strong>2、其次，需要添加头文件&lt;omp.h&gt;</strong></p>
<p>3、OpenMP有很多命令可以用，比较常见的就是用于for循环来提升循环效率，即<code>#pragma  omp parallel for</code></p>
<p>4、<strong>在使用OpenMP时，要注意避免线程数据之间的竞争而导致计算出现差错，同时，亦应合理管理私有数据和公有数据</strong></p>
<p>为避免线程数据之间的竞争而导致计算出现差错，下面是应用的一个例子</p>
<pre class=" language-CPP"><code class="language-CPP">#include "pch.h"
#include <iostream>
#include <stdio.h>
#include "omp.h"
#include<ctime>
using namespace std;
int main(int argc, char **argv) {
    //设置线程数，一般设置的线程数不超过CPU核心数，这里开4个线程执行并行代码段
    omp_set_num_threads(8);
    double start = clock();
    int sum=0;
#pragma omp parallel 
    {
    #pragma omp for reduction(+:sum)
        for (int i = 0; i < 40000; i++)
        {
            for (int j = 0; j < 40000; j++)
            {
                //cout << "i = " << i << ", I am Thread " << omp_get_thread_num() << endl;
                sum += 1;
            }
        }	
    }
    printf("sum=%d\n", sum);
    double end = clock();
    printf("Running time= %f", (end - start)/CLOCKS_PER_SEC);
}
</code></pre>
<p>reduction(+:sum)</p>
<p>冒号前面的“+”表示在各线程中sum要保留数据，计算结束后一起累加。</p>
<p>当然，OpenMP 不止能做累加，凡是累计运算都是可以的，如下表所示：</p>
<table>
<thead>
<tr>
<th>操作</th>
<th>私有临时变量初值</th>
</tr>
</thead>
<tbody><tr>
<td>+、-</td>
<td>0</td>
</tr>
<tr>
<td>*</td>
<td>1</td>
</tr>
<tr>
<td>&amp;</td>
<td>~0</td>
</tr>
<tr>
<td>`</td>
<td>`</td>
</tr>
<tr>
<td>^</td>
<td>0</td>
</tr>
<tr>
<td>&amp;&amp;</td>
<td>1(true)</td>
</tr>
<tr>
<td>`</td>
<td></td>
</tr>
</tbody></table>
<p>再如，为合理管理私有数据和公有数据，private命令可以声明循环的私有变量，这些变量在各线程中互相独立，互不影响，但是要注意，private不可声明static变量；</p>
<pre class=" language-CPP"><code class="language-CPP">#pragma  omp parallel for private(k1,k2)
        for (k1 = 1; k1 < 100; k1++)
        {
            for (k2 = 1; k2 < 100; k2++)
            {
                cout <<"k1="<< k1 << endl;
                cout <<"k2="<< k2 << endl;
                cout << "k=" << k << endl;
            }
            
        }
</code></pre>
]]></content>
      <categories>
        <category>并行计算</category>
      </categories>
      <tags>
        <tag>OpenMP</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>一个例子告诉你C++引用和指针的区别</title>
    <url>/Mrluo123.http-github.io/post/36765.html</url>
    <content><![CDATA[<h4 id="C-引用vs指针"><a href="#C-引用vs指针" class="headerlink" title="C++引用vs指针"></a>C++引用vs指针</h4><p>引用很容易和指针混淆，他们之间有三个主要的不同：</p>
<ul>
<li>不存在空引用。引用必须连接到一块合法的内存。</li>
<li>一旦引用被初始化为一个对象，就不能被指向到另一个对象。指针可以在任何时候指向到另一个对象。</li>
<li>引用必须在创建时被初始化。指针可以在任何时间被初始化。<span id="more"></span>
例如：</li>
</ul>
<pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">int</span><span class="token operator">&amp;</span> r<span class="token operator">=</span>i<span class="token punctuation">;</span>
<span class="token keyword">double</span> <span class="token operator">&amp;</span>s<span class="token operator">=</span>d
</code></pre>
<p>第一个声明可以读作“r是一个初始化为i的整型引用”，</p>
<p>第二个声明可以读作：“s是一个初始化为d的double型引用”</p>
<p>此外，通过一个例子就可以发现：</p>
<p>引用者的内容和内存都和被引用者保持一致。而赋值的话不是这样，只是内容相等，会另开辟一个内存地址来存储。</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">"pch.h"</span></span><span class="token comment" spellcheck="true">//预编译头文件一定要放在最后面</span>
<span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">float</span> b <span class="token operator">=</span> <span class="token number">1.234</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span><span class="token operator">&amp;</span> c <span class="token operator">=</span> a<span class="token punctuation">;</span>
    <span class="token keyword">int</span> c1 <span class="token operator">=</span> a<span class="token punctuation">;</span>
    <span class="token keyword">float</span><span class="token operator">&amp;</span> d <span class="token operator">=</span> b<span class="token punctuation">;</span>
    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"c的值等于"</span> <span class="token operator">&lt;&lt;</span> c <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>
    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"a的内存地址为"</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">&amp;</span>a <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//&amp;为取地址符</span>
    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"c的内存地址为"</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">&amp;</span>c <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>
    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"c1的内存地址为"</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">&amp;</span>c1<span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>
    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"d的值等于"</span> <span class="token operator">&lt;&lt;</span> d <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>结果：</p>
<p> c的值等于1<br>​ a的内存地址为0104FC38<br>​ c的内存地址为0104FC38<br>​ c1的内存地址为0104FC14<br>​ d的值等于1.234</p>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>关于C++函数引用传递的一些心得</title>
    <url>/Mrluo123.http-github.io/post/621.html</url>
    <content><![CDATA[<p>最近在看别人的程序的时候，了解到一种新的函数写法。<br>通常，我么在使用通常来讲，函数通过形参接收实参的数值，并返回相应的结果，这种方式我么成为“<em><strong>按值传递</strong></em>”（pass-by-value）,这种传递方法并不会修改原始数值本身。</p>
<span id="more"></span>
<p><em><strong>但是，如果想直接更改正在被调用中的函数中的一个值，就可以通过引用传递的方式来进行实现。</strong></em><br>这种方法我们称之为“<em><strong>引用传递</strong></em>”(pass-by-reference)<br>　引用参数传递过程中，被调函数的形式参数也作为局部变量在栈中开辟了内存空间，但是这时存放的是由主调函数放进来的实参变量的地址。被调函数对形参（本体）的任何操作都被处理成间接寻址，即通过栈中存放的地址访问主调函数中的实参变量（根据别名找到主调函数中的本体）。因此，被调函数对形参的任何操作都会影响主调函数中的实参变量。（此处引用*飘剑如虹 *的博客，原地址<a href="https://blog.csdn.net/u013130743/article/details/80806179%EF%BC%89">https://blog.csdn.net/u013130743/article/details/80806179）</a></p>
<h3 id="什么叫引用传递？"><a href="#什么叫引用传递？" class="headerlink" title="什么叫引用传递？"></a>什么叫引用传递？</h3><p>当使用引用变量作为形参时，它将变为实参列表中相应变量的别名，对形参进行的任何更改都将真正更改正在调用它的函数中的变量。当以这种方式将数据传递给形参时，该实参被称为按引用传递。<br>为了指明一个函数的形参是按引用传递的，只需要简单的对函数原型的形参类型添加一个&amp;标识即可<br>例如：</p>
<pre class=" language-CPP"><code class="language-CPP">int &a//这里的a就表示一个int类型的引用
</code></pre>
<p>为了让大家更清楚的认识到引用传递，这里举个例子：</p>
<pre class=" language-CPP"><code class="language-CPP">using namespace std;
int add1(int a, int b)
{
    int c = a + b;
    return c;
}//按值引用
int a = 1;
void square(int &a)
{
    a = pow(a, 2);
}//引用传递
int main()
{
    

    cout <<"1和2加起来等于 "<< add1(1, 2) << endl;
    int z = 2;
    cout << "before reference 'z'= " << z << endl;
    square(z);
    cout << "after reference 'z'= " <<z<< endl;
}
</code></pre>
<p>输出：</p>
<img src="/Mrluo123.http-github.io/post/621/1.jpg" class="" width="500" height="500">
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>引用传递</tag>
      </tags>
  </entry>
  <entry>
    <title>在Windows和Linux下如何配置MPI</title>
    <url>/Mrluo123.http-github.io/post/21781.html</url>
    <content><![CDATA[<h1 id="在Windows和Linux下如何配置MPI"><a href="#在Windows和Linux下如何配置MPI" class="headerlink" title="在Windows和Linux下如何配置MPI"></a>在Windows和Linux下如何配置MPI</h1><blockquote>
<p>MPI（英语：Message Passing Interface，缩写MPI）是一个跨语言的通讯协议，用于编写并行计算机。支持点对点和广播。MPI是一个信息传递应用程序接口，包括协议和和语义说明，他们指明其如何在各种实现中发挥其特性。<strong>MPI<strong><strong>的目标是高性能，大规模性，和可移植性。当下MPI</strong></strong>仍为高性能计算的主要模型</strong>。</p>
<p>在WIndows下和Linux下配置MPI的方法有所不同，本文将详细讲述如何在这两个操作系统下安装MPI并配置和运行一个简单的C++实例。</p>
</blockquote>
<span id="more"></span>
<h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><p><em>以下实例为WIN11+Visual Studio 2022</em></p>
<ol>
<li><p>下载安装MPICH,点击<a href="https://www.mpich.org/downloads/">下载</a>。这里下载的是微软官方的MPI工具，打开后有两个工具包，都要下载安装，前后顺序无要求。</p>
<img src="/Mrluo123.http-github.io/post/21781/1.jpg" class="" width="500" height="500">

<img src="/Mrluo123.http-github.io/post/21781/2.jpg" class="" width="500" height="500">
</li>
<li><p>安装。</p>
<p>点击.exe文件，建议安装到C盘默认路径；<br>点击.msi文件，建议安装到C盘默认路径；</p>
<p>打开cmd命令，输入<code>set MSMPI</code></p>
</li>
<li><p>配置visual studio</p>
<p>第一步：</p>
<ul>
<li>创建新项目或者打开您现有的项目。</li>
<li>打开属性页面，选择Debug或Release的X64模式。</li>
</ul>
<p>第二步：</p>
<ul>
<li>VC++目录→ 包含目录 追加 <code>你的路径\Microsoft SDKs\MPI\Include</code>。</li>
<li>VC++目录→ 库目录 追加 <code>你的路径\Microsoft SDKs\MPI\Lib\x64。</code></li>
</ul>
<p>第三步：</p>
<ul>
<li>设置附加包含目录 <code>$(MSMPI_INC);$(MSMPI_INC)\x64。</code></li>
<li>C/C++ → 预处理器 → 预处理定义 末尾追加 <code>;MPICH_SKIP_MPICXX。</code></li>
<li>C/C++ → 代码生成 → 运行库 选择 <code>多线程调试/MTd</code>或者<code>多线程/MT。</code></li>
</ul>
<p>第四步：</p>
<ul>
<li><p>链接器→输入→附加依赖项 追加 <code>;msmpi.lib。</code></p>
</li>
<li><p>链接器→所有选项→附加库目录 <code>$(MSMPI_LIB64)。</code></p>
<p><strong>最后点击确定就OK了！</strong></p>
</li>
</ul>
</li>
<li><p>编译&amp;运行测试</p>
<p>编译后运行程序，需要注意的是，MPI程序不能直接运行，否则只会识别一个处理器。</p>
<p><strong>正确的指令</strong>是：<code>mpiexec.exe -n your_processor_number your_code_name</code></p>
<p>运行示范程序如下:</p>
<pre class=" language-c++"><code class="language-c++">#include <mpi.h>
#include <stdio.h>

int main(int argc, char** argv) {
    // 初始化 MPI 环境
    MPI_Init(NULL, NULL);

    // 通过调用以下方法来得到所有可以工作的进程数量
    int world_size;
    MPI_Comm_size(MPI_COMM_WORLD, &world_size);

    // 得到当前进程的秩
    int world_rank;
    MPI_Comm_rank(MPI_COMM_WORLD, &world_rank);

    // 得到当前进程的名字
    char processor_name[MPI_MAX_PROCESSOR_NAME];
    int name_len;
    MPI_Get_processor_name(processor_name, &name_len);

    // 打印一条带有当前进程名字，秩以及
    // 整个 communicator 的大小的 hello world 消息。
    printf("Hello world from processor %s, rank %d out of %d processors\n",
        processor_name, world_rank, world_size);

    // 释放 MPI 的一些资源
    MPI_Finalize();
}
</code></pre>
<p>成功，Enjoy!</p>
</li>
</ol>
<img src="/Mrluo123.http-github.io/post/21781/3.jpg" class="" width="500" height="500">

<h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><p><em>以下实例为Ubuntu20.04.4 LTS + gcc 4.7.5</em></p>
<p>Ubuntu下安装MPICH较为简单，使用apt安装即可。</p>
<blockquote>
<p>MPICH是一种最重要的MPI实现它可以免费从<a href="http://www.unix.mcs.anl.gov/mpi/mpich%E5%8F%96%E5%BE%97">http://www.unix.mcs.anl.gov/mpi/mpich取得</a> 更为重要的是 MPICH是一个与MPI规范同步发展的版本 每当MPI推出新的版本就会有相应的MPICH的实现版本 目前MPICH的最新版本是MPICH-4.0.2，具体请参看MPICH官网：<a href="http://www.mpich.org/">www.mpich.org</a></p>
</blockquote>
<ol>
<li><p>安装。直接使用以下命令：</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> update
</code></pre>
<pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> -y <span class="token function">install</span> mpich
</code></pre>
</li>
<li><p>编译与运行：</p>
<pre class=" language-bash"><code class="language-bash">mpicc -o your_code_name your_cpp_name
</code></pre>
<pre class=" language-bash"><code class="language-bash">mpirun -n your_processor_number ./your_code_name
</code></pre>
</li>
</ol>
<p>成功，如下图所示，enjoy!</p>
<img src="/Mrluo123.http-github.io/post/21781/4.jpg" class="" width="500" height="500">
]]></content>
      <categories>
        <category>并行计算</category>
      </categories>
      <tags>
        <tag>MPI</tag>
      </tags>
  </entry>
  <entry>
    <title>如何安装win11+ubuntu双系统</title>
    <url>/Mrluo123.http-github.io/post/3709.html</url>
    <content><![CDATA[<h1 id="Windows11-x2F-10安装Ubuntu-20-04-6-LTS双系统"><a href="#Windows11-x2F-10安装Ubuntu-20-04-6-LTS双系统" class="headerlink" title="Windows11/10安装Ubuntu 20.04.6 LTS双系统"></a>Windows11/10安装Ubuntu 20.04.6 LTS双系统</h1><span id="more"></span>
<p><strong>1）如果你电脑本来就是双系统，打算重装ubuntu，则需要完全卸载ubuntu并删除引导项，请参考<a href="https://blog.csdn.net/qq_43310597/article/details/105782722">这篇文章</a>：</strong></p>
<p><strong>tips:推荐使用<a href="https://www.diskgenius.cn/download.php">diskgenius</a>来完全删除ubuntu，最简单最方便</strong></p>
<p><strong>2）如果你电脑只有win系统，打算安装ubuntu作为双系统，请参考youtube这个视频教程：</strong></p>
<iframe width="760" height="427" src="https://www.youtube.com/embed/bVmTxwUuXlM" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>







]]></content>
      <categories>
        <category>Ubuntu</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>双系统</tag>
      </tags>
  </entry>
  <entry>
    <title>数字孪生技术学习</title>
    <url>/Mrluo123.http-github.io/post/d2feeb9b.html</url>
    <content><![CDATA[<embed src="../pdf/White-paper-for-DT.pdf" width="100%" height="750" type="application/pdf">
]]></content>
      <categories>
        <category>数字孪生</category>
      </categories>
      <tags>
        <tag>数字孪生</tag>
      </tags>
  </entry>
  <entry>
    <title>核工高清素材图(长期更新中)</title>
    <url>/Mrluo123.http-github.io/post/1b933ad6.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="1babb0b1c7da852e222927d0ef2be38797cdb0046dad25dd46ee014965323386">4181f10c7c15e461887c19ff1613231be1a5ecacd740d4740771096fe153c173c89c303b65c70511c3eefcbe9cd9eb5912e96cb31b1810a6a5dcbf816ebb9a321340e66fa634d72b0851dd2a427a0ca4e738e2800aa739951d59284060c70889065bbb2f5b1005ec416b76b1e80a137b32c63a612a9dd4f6d6ba4848731ddcbf0adb60016cd1c7c08acaed0cfbc7ac77da4b23920d04361c1d96e28c47c835fbcd43e29d245a11cdf54a3ca635dcee40209c392211884787071453cf4f2863ccb3995f4c0437d36e7d0023fbcd4ef0d100d31ca1457d290703472350c4ae2d3ff5ba2a1ecc4e1f7b8421901a3e720509b48de566e718a391572c88fa6c73a79c986bafbffbf47b8c5a62364c44a4048ca668aef69baba2d9f15c9995b05fbcccb79d29978f2b406358ba5a22951340c0ca99327e0d631d27a4c2cc2a36f07f29e5ad8ed3e8b86b76842401544405e3054e5612ec82a34c405f5c3d8e349e3533b0c336a6931a8b7e621c4b597fa1367bf6f6bccc6bc454ec2f799b2d93421fc77d0e6e5aa850edc144247c7f3c5ca0d726079a1e86b4a5bbc94f65346365fd02c0d06e2093f1fd3587c10e2df2bf6fb950e6a698b5cfc28b1e0ce0ce579b2b3111744b4a896fd4a077c58c565bfbf2c77accfddf1ff4ea1f9d920eac373be0f3d72d258b5e967dbdae1787e2b14702bb1fc129477c4c656ae1c9379fa27ab848651348fdb007b53d2d0fa4fda26cd7065b25e409f15faee148c3eb888b8680bcc50490190548b6bdc6b49e14155e770c6ed0e7851cc7325d5188f3b5a822dce4cacc35af331eb81d67c22f3573a3224385893ce4083ba1dfcf5204f71704ad5ffd30a4c9ab0cd53a0631cb61ffced829e0ff6846f92afa36cc5e00184bedf25df0d8c093b0218d0f553b32bc7cc889e8c89ae5b1127d76d4f617f6466c75746bcce28277b52c59042cadcb8ea7aa073446d742783200c37006384774487221e7d07df8ad2b4e1dabe5696a679ddf35162d4d170dce2ecde3ec10cbaeccba5f7f1bf45740af31adcdab82cd3b767bacc3d7aaf441d38530a4903fb0b045ca5e52</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 请在这里键入本文的阅览密码.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/Mrluo123.http-github.io/lib/hbe.js"></script><link href="/Mrluo123.http-github.io/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>素材</category>
      </categories>
      <tags>
        <tag>素材</tag>
      </tags>
  </entry>
  <entry>
    <title>稀疏矩阵存储压缩技术简单介绍</title>
    <url>/Mrluo123.http-github.io/post/9ed8a6a7.html</url>
    <content><![CDATA[<h2 id="什么是稀疏矩阵？为何要压缩？"><a href="#什么是稀疏矩阵？为何要压缩？" class="headerlink" title="什么是稀疏矩阵？为何要压缩？"></a>什么是稀疏矩阵？为何要压缩？</h2><p>在科学计算中，经常面临大量的线性稀疏矩阵方程组求解。所谓稀疏矩阵，即元素大部分是0的矩阵(有些资料定义非零元素不超过5%的矩阵，为稀疏矩阵，如下图所示为稀疏矩阵和稠密矩阵的示意图), 矩阵的稀疏性可以用一个分数来量化，即矩阵中零元素的个数除以矩阵中元素的总数。</p>


<p>显然，对稀疏矩阵中的非零项进行存储对计算机内存是极大的浪费，因为这些非零项的信息对求解毫无意义，因此在实际操作中往往采用矩阵存储压缩技术，存储稀疏矩阵时常用的有如下三种压缩格式:</p>
<h2 id="Coordinate-COO-x2F-三元组"><a href="#Coordinate-COO-x2F-三元组" class="headerlink" title="Coordinate(COO)/三元组"></a>Coordinate(COO)/三元组</h2><img src="/Mrluo123.http-github.io/post/9ed8a6a7/coo.gif" class="" width="600" height="600">

<p>这种存储格式比较简单易懂，每一个元素需要用一个三元组来表示，分别是（行号，列号，数值），对应上图右边的一列。这种方式简单，但是记录单信息多（行列），每个三元组自己可以定位，因此空间不是最优的。</p>
<p>常用的开源矩阵求解库Eigen中的<a href="https://eigen.tuxfamily.org/dox/classEigen_1_1Triplet.html">Triplet</a>就对应这一操作。</p>
<h2 id="Compressed-Sparse-Row-CSR-x2F-行优先"><a href="#Compressed-Sparse-Row-CSR-x2F-行优先" class="headerlink" title="Compressed Sparse Row (CSR)/行优先"></a>Compressed Sparse Row (CSR)/行优先</h2><img src="/Mrluo123.http-github.io/post/9ed8a6a7/csr.gif" class="" width="600" height="600">

<p>这是经常用的一种，我们会经常在一些标准的线性代数库或者数值运算库中看到此方式存储；CSR是比较标准的一种，也需要三类数据来表达：数值，列号，以及行偏移。CSR不是三元组，而是整体的编码方式。数值和列号与COO一致，表示一个元素以及其列号，行偏移表示某一行的第一个元素在values里面的起始偏移位置。</p>
<h3 id="Compressed-Sparse-Column-CSC-x2F-列优先"><a href="#Compressed-Sparse-Column-CSC-x2F-列优先" class="headerlink" title="Compressed Sparse Column (CSC)/列优先"></a>Compressed Sparse Column (CSC)/列优先</h3><img src="/Mrluo123.http-github.io/post/9ed8a6a7/csc.gif" class="" width="600" height="600">

<p>CSR是按行来存储一个稀疏矩阵的，其原理与CSC类似。indptr中的数据表示矩阵中每一行的数据在data中开始和结束的索引，而indices中的数据表示所对应的在data中的数据在矩阵中其所在行的所在列数。可以看出，在indptr、indices和data三个数组相同的情况下，通过CSC和CSR分别表示出来的矩阵互为转置关系。</p>
<p>注：上述图片来自<a href="https://matteding.github.io/">Matt Eding</a>的个人博客，更多矩阵压缩方法可参考<a href="https://matteding.github.io/2019/04/25/sparse-matrices/">Matt Eding’s Blog</a>或<a href="https://docs.nvidia.com/cuda/pdf/CUSPARSE_Library.pdf">CUDA手册</a>。</p>
]]></content>
      <categories>
        <category>科学计算</category>
      </categories>
      <tags>
        <tag>CUDA</tag>
        <tag>稀疏矩阵</tag>
        <tag>计算机</tag>
      </tags>
  </entry>
  <entry>
    <title>虚拟机安装Debian以及配置SALOME教程</title>
    <url>/Mrluo123.http-github.io/post/23422.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="9bc410bb7dd9ec0e43c4c2b23a15aee8729c849daba08057021de0ea562be842"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 请在这里键入本文的阅览密码.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/Mrluo123.http-github.io/lib/hbe.js"></script><link href="/Mrluo123.http-github.io/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Ubuntu</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>SALOME</tag>
        <tag>虚拟机</tag>
      </tags>
  </entry>
  <entry>
    <title>超算作业提交：Slurm命令备忘录</title>
    <url>/Mrluo123.http-github.io/post/65958fd8.html</url>
    <content><![CDATA[<h2 id="0-常用术语"><a href="#0-常用术语" class="headerlink" title="0.常用术语"></a>0.常用术语</h2><p>user：用户名<br>node：计算节点<br>core：cpu 核<br>job：作业<br>job step：作业步，单个作业可以有多个作业步<br>partition：分区，作业需在特定分区中运行<br>QOS：服务质量，可理解为用户可使用的 CPU、内存等资源限制<br>tasks：任务数，默认一个任务使用一个 cpu 核，可理解为作业所需的 cpu 核数<br>socket：cpu 插槽，可理解为物理 cpu 颗数<br>stdout：标准输出文件，程序运行正常时输出信息的文件，一般指输出到屏幕的信息<br>stderr：标准错误文件，程序运行出错时输出信息的文件，一般指输出到屏幕的信息</p>
<h2 id="1-Slurm作业管理系统"><a href="#1-Slurm作业管理系统" class="headerlink" title="1 Slurm作业管理系统"></a><strong>1 Slurm作业管理系统</strong></h2><p>大多数<a href="https://zh.wikipedia.org/wiki/%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%9B%86%E7%BE%A4">计算机集群</a>（Cluster）系统都使用Slurm作业管理系统，采用共享模式。为避免系统资源浪费，使用时请尽量保证满核提交（即为单节点核数的整数倍），<strong>禁止在登录节点直接运行计算程序</strong>。作业管理系统常用命令如下：</p>
<h2 id="2-sinfo查看系统资源"><a href="#2-sinfo查看系统资源" class="headerlink" title="2 sinfo查看系统资源"></a><strong>2 sinfo查看系统资源</strong></h2><p>sinfo得到的结果是当前账号可使用的队列资源信息，如下所示：</p>
<img src="/Mrluo123.http-github.io/post/65958fd8/1.png" class="">

<blockquote>
<p>第一列PARTITION是队列名。<br>第二列AVAIL是队列可用情况，如果显示up则是可用状态；如果是inact则是不可用状态。<br>第三列TIMELIMIT是作业运行时间限制，默认是infinite没有限制。<br>第四列NODES是节点数。<br>第五列STATE是节点状态，idle是空闲节点，alloc是已被占用节点，comp是正在释放资源的节点，其他状态的节点都不可用。<br>第六列NODELIST是节点列表。</p>
</blockquote>
<p>sinfo的常用命令选项：</p>
<blockquote>
<p>sinfo -n comput1<br>指定显示节点comput1的使用情况<br>sinfo -p com<br>指定显示队列com情况</p>
</blockquote>
<p>其他选项可以通过sinfo –help查询</p>
<h2 id="3-squeue查看作业状态"><a href="#3-squeue查看作业状态" class="headerlink" title="3 squeue查看作业状态"></a><strong>3 squeue查看作业状态</strong></h2><p>squeue得到的结果是当前账号的作业运行状态，如果squeue没有作业信息，说明作业已退出。</p>
<img src="/Mrluo123.http-github.io/post/65958fd8/2.png" class="">

<blockquote>
<p>第一列JOBID是作业号，作业号是唯一的。<br>第二列PARTITION是作业运行使用的队列名。<br>第三列NAME是作业名。<br>第四列USER是超算账号名。<br>第五列ST是作业状态，R表示正常运行，PD表示在排队，CG表示正在退出，S是管理员暂时挂起。<br>第六列TIME是作业运行时间。<br>第七列NODES是作业使用的节点数。<br>第八列NODELIST(REASON)<br>对于运行作业（R状态）显示作业使用的节点列表；对于排队作业（PD状态），显示排队的原因。</p>
</blockquote>
<p>squeue的 常用命令选项：</p>
<blockquote>
<p>queue -j 123456<br>查看作业号为123456的作业信息<br>squeue -u paratera<br>查看超算账号为 paratera的作业信息<br>squeue –p com<br>查看提交到com队列的作业信息<br>squeue -w comput1<br>查看使用到comput1节点的作业信息</p>
</blockquote>
<p>其他选项可通过squeue –help命令查看。</p>
<h2 id="4-srun交互式提交作业"><a href="#4-srun交互式提交作业" class="headerlink" title="4 srun交互式提交作业"></a><strong>4 srun交互式提交作业</strong></h2><p>srun [options] program命令属于交互式提交作业，有屏幕输出，但容易受网络波动影响，断网或关闭窗口会导致作业中断。<br>srun 命令示例：</p>
<blockquote>
<p>srun -p com -w comput[1-2] -N 2 -n 40 -t 20 A.exe</p>
</blockquote>
<p>交互式提交A.exe程序。如果不关心节点和时间限制，可简写为srun -N 2 -n 40 A.exe</p>
<blockquote>
<p>-p com指定提交作业到com队列；<br>-w comput[1-2] 指定使用节点comput[1-2]；<br>-N 2 指定使用2个节点；<br>-n 40 指定进程数为40；<br>-t 20 指定作业运行时间限制为20分钟。</p>
</blockquote>
<p>srun 的一些常用命令选项：</p>
<blockquote>
<p>-N 3<br>指定节点数为3<br>-n 20<br>指定进程数为20<br>-c 20<br>指定每个进程（任务）使用的CPU核为20<br>-p com<br>指定提交作业到com 队列<br>-w comput[1-2]<br>指定提交作业到comput1、comput2节点<br>-x comput[1-2]<br>排除comput1、comput2节点<br>-o out.log<br>指定标准输出到out.log文件<br>-e err.log<br>指定重定向错误输出到err.log文件<br>-J JOBNAME<br>指定作业名为JOBNAME<br>-t 20<br>限制运行20分钟</p>
</blockquote>
<p>srun的其他选项可通过srun –help查看。</p>
<h2 id="5-sbatch后台提交作业"><a href="#5-sbatch后台提交作业" class="headerlink" title="5 sbatch后台提交作业"></a><strong>5 sbatch后台提交作业</strong></h2><p>sbatch一般情况下与srun一起提交作业到后台，需要将srun写到脚本中，再用sbatch 提交脚本。这种方式不受本地网络波动影响，提交作业后可以关闭本地电脑。sbatch命令没有屏幕输出，默认输出日志为提交目录下的slurm-xxx.out文件，可以使用tail -f slurm-xxx.out实时查看日志，其中xxx为作业号。<br>sbatch命令示例1（40个进程提交A.exe程序）：<br>编写脚本job1.sh，内容如下：</p>
<blockquote>
<p>#!/bin/bash<br>srun -n 40 A.exe</p>
</blockquote>
<p>然后在命令行执行sbatch -p com job1.sh 提交作业。脚本中的#!/bin/bash是bash脚本的固定格式。从脚本的形式可以看出，提交脚本是一个shell脚本，因此常用的shell脚本语法都可以使用。作业开始运行后，在提交目录会生成一个slurm-xxx.out日志文件，其中xxx表示作业号。<br>sbatch命令示例2（指定2个节点，4个进程，每个进程10个cpu核提交A.exe程序，限制运行60分钟）：<br>编写脚本job2.sh，内容如下：</p>
<blockquote>
<p>#!/bin/bash<br>#SBATCH -N 2<br>#SBATCH -n 4<br>#SBATCH -c 20<br>#SBATCH -t 60<br>srun -n 4 A.exe</p>
</blockquote>
<p>然后在命令行执行sbatch -p com job2.sh就可以提交作业。其中#SBATCH注释行是slurm定义的作业执行方式说明，一些需要通过命令行指定的设置可以通过这些说明写在脚本里，避免了每次提交作业写很长的命令行。<br>sbatch命令示例3（单节点提交多任务）<br>编写脚本job3.sh，内容如下：</p>
<blockquote>
<p>#!/bin/bash<br>srun -n 5 A.exe undefined<br>srun -n 5 B.exe undefined<br>srun -n 5 C.exe undefined<br>srun -n 5 C.exe undefined<br>wait</p>
</blockquote>
<p>然后在命令行执行sbatch -N 1 -p com job3.sh，这里是单节点同时提交4个任务，每个任务使用5个进程。这里需要5个任务全部执行完毕，作业才会退出。<br>sbatch 的一些常用命令选项基本与srun的相同，具体可以通过sbatch –help查看。</p>
<h2 id="6-salloc分配模式作业提交"><a href="#6-salloc分配模式作业提交" class="headerlink" title="6 salloc分配模式作业提交"></a><strong>6 salloc分配模式作业提交</strong></h2><p>salloc命令用于申请节点资源，一般用法如下：</p>
<blockquote>
<p>1、执行salloc -p com；<br>2、执行squeue 查看分配到的节点资源，比如分配到n001；<br>3、执行ssh comput1登陆到所分配的节点；<br>4、登陆节点后可以执行需要的提交命令或程序；<br>5、作业结束后，执行scancel JOBID释放分配模式作业的节点资源。</p>
</blockquote>
<h2 id="7-scancel取消已提交的作业"><a href="#7-scancel取消已提交的作业" class="headerlink" title="7 scancel取消已提交的作业"></a><strong>7 scancel取消已提交的作业</strong></h2><p>scancel 可以取消正在运行或排队的作业。<br>scancel的一些常用命令示例：</p>
<blockquote>
<p>scancel 123456<br>取消作业号为123456的作业<br>scancel -n test<br>取消作业名为test的作业<br>scancel -p com<br>取消提交到com队列的作业<br>scancel -t PENDING<br>取消正在排队的作业<br>scancel -w comput1<br>取消运行在comput1节点上的作业</p>
</blockquote>
<p>scancel的其他参数选项，可通过scancel –help查看</p>
<h2 id="8-scontrol查看正在运行的作业信息"><a href="#8-scontrol查看正在运行的作业信息" class="headerlink" title="8 scontrol查看正在运行的作业信息"></a><strong>8 scontrol查看正在运行的作业信息</strong></h2><p>scontrol命令可以查看正在运行的作业详情，比如提交目录、提交脚本、使用核数情况等，对已退出的作业无效。<br>scontrol的常用示例：</p>
<blockquote>
<p>scontrol show job 123456</p>
</blockquote>
<p>查看作业号为123456的作业详情。<br>scontrol 的其他参数选项，可通过scontrol –help查看。</p>
<h2 id="9-sacct查看历史作业信息"><a href="#9-sacct查看历史作业信息" class="headerlink" title="9 sacct查看历史作业信息"></a><strong>9 sacct查看历史作业信息</strong></h2><p>sacct命令可以查看历史作业的起止时间、结束状态、作业号、作业名、使用的节点数、节点列表、运行时间等。<br>sacct的常用命令示例：</p>
<blockquote>
<p>sacct -u paratera -S 2018-07-01 -E now –field=jobid,partition,jobname,user,nnodes,nodelist,start,end,elapsed,state</p>
</blockquote>
<p>其中，-u paratera是指查看paratera账号的历史作业，-S是开始查询时间，-E是截止查询时间，–format定义了输出的格式，jobid是指作业号，partition是指提交队列，user是指超算账号名，nnodes是节点数，nodelist是节点列表，start是开始运行时间，end是作业退出时间，elapsed是运行时间，state是作业结束状态。sacct –helpformat可以查看支持的输出格式。<br>sacct的其他参数选项可通过sacct –help查看。</p>
<h2 id="10-作业模版"><a href="#10-作业模版" class="headerlink" title="10 作业模版"></a><strong>10 作业模版</strong></h2><blockquote>
<p>#!/bin/bash<br>#SBATCH -p com 指定队列名称<br>#SBATCH -J test 指定作业名称<br>#SBATCH -N 2 指定要提交的节点数量<br>#SBATCH -n 8 指定要提交的总核数<br>#SBATCH -o test.o 指定标准输出文件名<br>#SBATCH -e test.e 指定错误输出文件名<br>srun -N 2 -n 8 -p com hostname 程序运行命令</p>
</blockquote>
<h2 id="11-Linux-常用命令"><a href="#11-Linux-常用命令" class="headerlink" title="11 Linux 常用命令"></a><strong>11 Linux 常用命令</strong></h2><ol>
<li>date :显示或设置系统时间 </li>
<li>ls :列出当前或指定目录下的文件或目录。 </li>
<li>pwd: 显示当前目录 </li>
<li>cd : 进入指定目录 </li>
<li>more, less, head tail: 显示或部分显示文件内容. </li>
<li>lp/lpstat/cancel, lpr/lpq/lprm: 打印文件的有关命令.</li>
<li>chmod:更改文件读、写或执行权限 </li>
<li>rm :删除文件或目录 </li>
<li>cp:拷贝文件或目录</li>
<li>mv : 文件更名或移动</li>
<li>vi/vim:文本编辑器 </li>
<li>top : 查看系统长时间运行的主要进程 </li>
<li>fg jobid :可以将一个后台进程放到前台。<br>Ctrl-z 可以将前台进程挂起(suspend), 然后可以用 bg jobid 让其到后台运行。<br>job undefined 可以直接让 job 直接在后台运行。 </li>
<li>ps:查看系统进程, ps -e 或 ps -o pid,ppid,session,tpgid, comm (其中 session 显示的 sessionid, tpgid 显示前台进程组 id, comm 显示命令名称。)</li>
<li>kill : 杀掉一个指定进程号的进程或向系统发送一个信号。</li>
<li>scp: 远程文件拷贝。 </li>
<li>man :给出指定命令的详细使用说明。 </li>
<li>Linux 的绝大部分命令都可以用man命令来查看更详细的说明。</li>
</ol>
<h2 id="12-其他教程"><a href="#12-其他教程" class="headerlink" title="12 其他教程"></a><strong>12 其他教程</strong></h2><p>官方手册（英文）：<a href="https://slurm.schedmd.com/documentation.html">https://slurm.schedmd.com/documentation.html</a></p>
<p>官方手册（中文）：<a href="https://docs.slurm.cn/users/kuai-su-ru-men-yong-hu-zhi-nan">https://docs.slurm.cn/users/kuai-su-ru-men-yong-hu-zhi-nan</a></p>
<p>Slurm作业调度系统指南（<a href="https://scc.ustc.edu.cn/">中科大超算中心</a>）：<a href="http://hmli.ustc.edu.cn/doc/userguide/slurm-userguide.pdf">http://hmli.ustc.edu.cn/doc/userguide/slurm-userguide.pdf</a></p>
<h2 id="附录：Slurm-Cheat-Sheet"><a href="#附录：Slurm-Cheat-Sheet" class="headerlink" title="附录：Slurm Cheat Sheet"></a>附录：Slurm Cheat Sheet</h2><embed src="../pdf/slurm_summary.pdf" width="100%" height="750" type="application/pdf">
]]></content>
      <categories>
        <category>并行计算</category>
      </categories>
      <tags>
        <tag>集群作业</tag>
      </tags>
  </entry>
</search>
