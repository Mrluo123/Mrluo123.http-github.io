<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Xiao Luo</title>
  
  <subtitle>小罗的博客</subtitle>
  <link href="https://mrluo123.github.io/Mrluo123.http-github.io/atom.xml" rel="self"/>
  
  <link href="https://mrluo123.github.io/Mrluo123.http-github.io/"/>
  <updated>2021-12-11T07:43:53.658Z</updated>
  <id>https://mrluo123.github.io/Mrluo123.http-github.io/</id>
  
  <author>
    <name>Xiao Luo</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Star-CCM+安装教程（Linux)</title>
    <link href="https://mrluo123.github.io/Mrluo123.http-github.io/2021/12/10/star-ccm-an-zhuang-jiao-cheng-linux/"/>
    <id>https://mrluo123.github.io/Mrluo123.http-github.io/2021/12/10/star-ccm-an-zhuang-jiao-cheng-linux/</id>
    <published>2021-12-10T11:51:16.000Z</published>
    <updated>2021-12-11T07:43:53.658Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="3b57eddcde924175cf9f969c38f6b16f1e384ba65c10b07a620e4a95c2d75593">aab390a8541b3e94d7933e75be9829b022d4e22a0bd463bb1130a7edfaefc38ced8c6c68c7b1df7e15793f0609a67b3bc83dd8638c73de58a0b39d93eba86038297bc8e5f2fdcfb89f8fda040027886d64fd855fd80e86582c882dd374ced3dc2da2f43c2d3676f9e7c54e8eac4819f3739b4809795ee3ae1956cac16d9d17c90806b2801ca8fa917ac71f9d56b02436f1519b603f71e3167166c8a8c8f2a0eefed6f8cc4cc2f4efa3af016e146ee48fd81530d427aa7683a0493236e3e846d3fb1e641aff9fb181030f452cce8502545565ddad35ddc767b514fa4f6c9c1d35dc10becd6cf6b13fb7866194453fe71f581b19ad82f77c9e7da3dafbf5c4b819893564cbad7a4a64645cf00279948dd3f5bb7b71f305563d401983c0de942d12e717fc5c46ac461d5309f33cbfda5bbf2b071f32bc57360fd99be715ad3478271960de7ad98e9465e8d329fd051ca33bbbda33cc192a332e524584bac4d4417b160caca95ff376415c3d773a9d1b38bcde7a948588b29ae2d92b9bddf01d5dc49cd277148bd760cbf27baef9d8157a503018bfab9860d02ab4c368f6a65bbc798a9fcf73b88d71d33d64fec70077a5e540358f908dca6d27d9746e1d2714e2c72bf4636917090598dc9c2748d0daf872c4a67ef8076cd05d424bf7d64a7f326a665236a4b318369440d58f5f006439670e804553c6a8b3d37f81b7e2ba321d1bc7e4d368117b747ef8a28404dee2e382353e341e4def0c6f6c4b924067c5194ed78d62d8d7bc4e2f1fbf8c63f96772d0249b109c3e7b223adb47e622625e469c0f9cebd015859a52381077429bcb3de4fd3e6c092225051fb86fc945174eaf0f18859cc3d5dfba1d11c61071906609ec14eb605cb584b4c48654f7cbd1a576183ca102976ecf9cd4e95903c041cd3c71b8a4589836fa4d9046d13fbec4186bffcb84acbfd7885dfd58c1e33cc883c815384c9ed9832bec6cf4b36c4226899e4f1acae9db593009c8a884108984fd04696a3f107cf4945ba665762e1afa1cf4ecf87041154297992b43d457f0ab49ff1ae631f437cc1adaa26a936f5407c13487b9818d792194447474e3993f1f137822a9074707afe089aeab7b89ee0909b03e1e76ddd7fe56e10a9b0765278fddbb84963c2ef5693e5b528f7144d37dbd8dd86c3e1f37ad6cacc7034d76b5b2d7891d303e5e5531cf6264a7b13a99b0784e479e740aeb61a0c3ba09f9f44155c7285e3482f1c59bba5996871b4a683a9d32b8e11121467da876369d0ed509063a08b86f8917cdc833658d6911defa7ce019953ebc16fc82cae76536d6e578c8742bd52f67652b39e6bfe0441544fc6f88564b23ab3526b3ab01ea3f3f64d050aded71fe928376f56ab229ef66363bfc9245f425a7279671a5e870cb33726d19b89b5a42dc69a616acd13446b0595316577742050f30dbbf2867e784994ed4c588afcff3793585e6019bd00107ddf871e7ad9c48015ff854676656cd6162db8e7e14b2feb3f17dfb783c229878ea7f293a1ca1a8aae7ecfa4c4916b86341d107b34b65ad617c068bb1a422ed8b74f665cabb5f15cedffadaaf9aa73f44161dd09c3322f23330853e14361fa8cc6c0e22eff4bfabb430f3360de3ac7a61c8fe94a2d1b189140885cc72adbe1039b62c468585460cbd9b19d738e88cebe73c353d66f4d477db47f0f11b61e3a92ea4db9331769fd0c2f0fd36d05769b6525a92c8d9fa8b3ce33bb5755ee618ec7bd9dd3079a73b5866bfbc9a1d282ae32ca3057ab17b9e83610749f5b8c7a8ff1129282f0f15ff1adbeb9ed5cc6485c75f7e845c6d3cb01ca69886610cb008702e343b5afd572e334938af9bca612b6ea9ba8a525ded057b7603ae1143a2a5fa014a549f27a80cca016e2ae0052aec49e6ef7dd3586b4692300945a035fcb07c5196bccd7373ec912ac149355669901f670746d781a22755628ee601dd2a564dde8302f97af070d9a0e2e346d4da87f775358666c49926ba66832e00404ecf0b7b31d51fecf6c3b5f27175d761c794991b4c4dd9d6ba9356a311254340b88414cebfcbdfa72c479dc54a65535cf9664447278dff72fb0074ea6aea3252c62a0d1b23ca890121e5b4f5855ad967874c824e596a6fd1be848be8fd8d943c7e9a424219738a48a5b3086a0d886e07c61de0d6a3a53fe4d7cfcba67b356d1a6eb802fdd335c35f508c4712ae8bce375c5460bf6fa556b48f44b22bad2b717f848b9bf16ae5151bba49a73d0db50f7f592cbd6a6af84437500ae57893cd07b389bd3f8694ce5894a272480ea3451e518472e0d6d924509222dfcca29a44268a847da39c1e6059383eb71d33a5a47f122867849d174fd0049f3ff723dbde1c00e6b467bd0a21074f10c979d44f9546975bbff257c02488f003d4a0cf7bcce68fa82c9ce53813bfeb030822bf1e1d233f919ff0baa4f5fd651d10e8c5bdf70ef2b47fad18f275ec5a432acb9de5c1740748a4de8d462fd2899554a0b7906f88d22d1a0f8a382772d820d02563a57d407a7a1700ef89f05c80016d7eb917806bdbaa5977b9b247649a4c0a22786b965fe4297b4c28a936063a1b1671b21b30ffa46631d604b5af68bae29ff7ebad5745a4804618da09fa9287727e10d6a3d14b05f0565f8efafa8520738a80f7fad52c4236c49a92f3285b482e33b2697575e3cde4d0349c0bc67d726610dc05cbbbde30e3278bfae4e77302e6ac93991a2ca6355d5d6dd8bb94e1841b6c59acda42a90b369ceefbbd87dae8d95d8b05973822964b25b5a57b89e2aaffab668cb1164be8d997b2ea93613c4301da998e50dd92c77405d5a0c0317282b441297645cc4d4af6611d04c7c3e2e3dc4c30134ae9172998458d61148fbab840706b63739ba9c8dcd0468c6f74829bbc38548d7b8aa7464e646a8f1155e99672fb845a65768efbc99713a3374452650f00de8c1473c98fab9e851d8852749a42278e7f5b5a4b857d0f9209690dbec6f0719878356282f4fddded16b5d8b64d540f644362286d0c1325aa037026ccd96eda2eedfb1115a77c97d93b568ea0efb0176bbad61d99a8dd76b9ab8bc4f64ad88bdb71a8f432e96d8859514cbe33a8e0c7f8baf356b267d56e38589fb79137f859c59b34474d75f60ebe7360bd50386a5ad7bca672d72d5ac81efa9a967978851948eea111fc664bbcbded1a242de5aef947ef9facd8014ab070a5dbcfec7f8dd8b62ae9bbdc60583973b8ffda26330182c6a55bff67e2131637c0779f89242136aa69289b880ab7f644b25526c1bb61ebb9672d050e32fe246f4ea4366bed8cf45637598a96586517d10d403b7416f38bc81a5112b956b256cd343c6cebaaaebeccb613a7147edac020ec53d53271970efc908a5a698f349d9b9effa09dbcc024f5097920561f4607b4606948e0659aeca94a28c3fa4151d820904c9c8b0b07d1e67b184cdae779ba972f8a8c937b59cb1153ef28343a080f7e4c86840874ad460351aa54dfa2aa42bb182f71be8cf4ce6ef8cc917fd08bfba892edad6e00c8e4d97fb5cd202f380edd225f1c7a831eb265dd09f6db7a280db759b444e97cbb365c2f95e6eaf787a1e7e40f83039e864106293684cc315e3851609f6f46395c17231e19259799ffed93f963adea91c2439032ff411cd3853374575cd969c9ef11ff553e3c01937116c384a9176d8a35c6965627b75f58ea0697ad789606b63f8f6a727c1139c1babb736490290ee70399b362f24cb4cd0bad5840faab580b96d7a94705da9c004f712d6245e0e016fee5d8278e7cf571a7486aa114f8e891e03f090213b616ceb9110b6152593953bcf79e4c3d53fac1babe1722c8ba4781370630ca38dc989cd17bb139cfc1c732200328124d4e81b4f4cf79543a1aac4d77626f700f4502ff84ef4a914d4f6d7db33ff98843513c3629d78e6885f9984ed3827ca711bdb664f83a97d339380413376913ff3cca2b029980afe472ff393e91ac16025821276d7bfa76e9d91b569ee860e62b58b0267ff9f8d451a4d4845334a6966c2829b3f8dbddd441e614dec26b4510b2e952a055c8a7d35b09f5512286ace4ad2ff8da7e72aa6f73524c5e9b5e6adc219d472edeab31f608bd77da5a40fb34c85992ead45f49ee55d3baf77c27feaaf76917bdadf2790b24d1337ce72e48f1ffba6ef5d04327b297983ada2e8c4f0aa6088b0d2d32d8bfcef0031de65d31d8aecab164174ad583080bb0cc978972847238672b24944dae6c2032f480a8b14a499d87859d6341e1cf642a4b9a5836b593e40aba042259823bbb19ecc474b428ab97c47e213d9c404185c2745383724a6f7a4662e3d95918c0802ac241f7023b9db0428310fed60d498d0abcee03d18ee465ebae02eb4b6d3d9cc6eaab991078abd818ae437e2375dfb93faf63638811344da946713f4f81b7ad539f7bec98ec4612214da4566841f5001da57bd2d48634a48e68dfd15a4517dcd63d4669848be422bec1c5c09361f4bc7b3771929bd043cf9959dd8b714c755fa6a1a502a7253043783907bc9c84481c909c7448b9774eecdbd940a8531572e1e94ce4660384262f3b2d7bea8158bd5dff640cc75cd1f30ab8db38714b27ea8980a38cbdaee99e283798bef9bf404383127fc6d083fa459108bb2740e9821936cf6a5355b4d2ceb62ca228e4c8b7a4d2f9b8c1dc795b370e91649b9fe1dd8ef50262eccf95c4e7d69075a2a25196681aba3048c3a0946cb7fe529990e4d03af9c3f205a94891b453e59e75d7cf159361022f2302d077d3c7930858e64f595a79ba2e1119c79a2ea6bf75d7b72fce800a4d2d49542db9341b57c9a6395bc91dc4878b0ab448332e73a875e3ed4ca2f735a0a0ed1d7e4dced3c24222066c9e564c28e73008840c7840e28217902ef98f28dcd375a6b72f454634d43372c37ca6f5abb8823b6e50bf306e0ad26b8ed0a690fad63fbcbc342ade92225f4b693e01e9699822276db7bc67a3957d1d93da156683e852c30de0c0c82bdc3eb60a1d1f1b09940d464e</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 请在这里键入本文的阅览密码.</span>      </label>    </div>  </div></div><script data-pjax src="/Mrluo123.http-github.io/lib/hbe.js"></script><link href="/Mrluo123.http-github.io/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">本文被加密了, 请输入密码查看.</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>使用OpenMP进行C++并行编程的一些心得</title>
    <link href="https://mrluo123.github.io/Mrluo123.http-github.io/2021/12/09/shi-yong-openmp-jin-xing-c-bing-xing-bian-cheng-de-yi-xie-xin-de/"/>
    <id>https://mrluo123.github.io/Mrluo123.http-github.io/2021/12/09/shi-yong-openmp-jin-xing-c-bing-xing-bian-cheng-de-yi-xie-xin-de/</id>
    <published>2021-12-09T12:00:37.000Z</published>
    <updated>2021-12-10T12:01:45.522Z</updated>
    
    <content type="html"><![CDATA[<p>最近在编程时，由于涉及到大量for循环等遍历计算，需要了解并行编程知识，于是看了下OpenMP的相关教程；</p><p>何为OpenMP?以下为百度百科内容：</p><p><em>OpenMP是由OpenMP Architecture Review Board牵头提出的，并已被广泛接受，用于<a href="https://baike.baidu.com/item/%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98/2182364">共享内存</a>并行系统的多处理器程序设计的一套指导性编译处理方案(Compiler Directive) [1] 。OpenMP支持的编程语言包括<a href="https://baike.baidu.com/item/C">C</a>、<a href="https://baike.baidu.com/item/C%2B%2B">C++</a>和<a href="https://baike.baidu.com/item/Fortran">Fortran</a>；而支持OpenMp的<a href="https://baike.baidu.com/item/%E7%BC%96%E8%AF%91%E5%99%A8/8853067">编译器</a>包括Sun Compiler，GNU Compiler和Intel Compiler等。OpenMp提供了对<a href="https://baike.baidu.com/item/%E5%B9%B6%E8%A1%8C%E7%AE%97%E6%B3%95/967188">并行算法</a>的高层的抽象描述，程序员通过在<a href="https://baike.baidu.com/item/%E6%BA%90%E4%BB%A3%E7%A0%81">源代码</a>中加入专用的pragma来指明自己的意图，由此编译器可以自动将程序进行并行化，并在必要之处加入同步互斥以及通信。当选择忽略这些pragma，或者编译器不支持OpenMp时，程序又可退化为通常的程序(一般为<a href="https://baike.baidu.com/item/%E4%B8%B2%E8%A1%8C/3555818">串行</a>)，代码仍然可以正常运作，只是不能利用多线程来加速程序执行</em>。</p><p>在用OpenMP进行并行编程时，只需要加入#pragma omp parallel语句以及后面的操作命令即可，十分简单，便于程序员操作；</p><p>下面以vs为例，介绍OpenMP的简单用法：</p><p>1、首先，新建项目并添加代码后，需要打开vs的OpenMP支持选项：<strong>右键项目属性-C/C+±语言-OpenMP支持</strong><br><img src="https://img-blog.csdnimg.cn/20191219104240890.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hlbGxvV29ybGQxMjExMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>2、其次，需要添加头文件&lt;omp.h&gt;</strong></p><p>3、OpenMP有很多命令可以用，比较常见的就是用于for循环来提升循环效率，即</p><pre><code>#pragma  omp parallel for</code></pre><p>4、<strong>在使用OpenMP时，要注意避免线程数据之间的竞争而导致计算出现差错，同时，亦应合理管理私有数据和公有数据</strong></p><p>为避免线程数据之间的竞争而导致计算出现差错，下面是应用的一个例子</p><pre class=" language-CPP"><code class="language-CPP">#include "pch.h"#include <iostream>#include <stdio.h>#include "omp.h"#include<ctime>using namespace std;int main(int argc, char **argv) {    //设置线程数，一般设置的线程数不超过CPU核心数，这里开4个线程执行并行代码段    omp_set_num_threads(8);    double start = clock();    int sum=0;#pragma omp parallel     {    #pragma omp for reduction(+:sum)        for (int i = 0; i < 40000; i++)        {            for (int j = 0; j < 40000; j++)            {                //cout << "i = " << i << ", I am Thread " << omp_get_thread_num() << endl;                sum += 1;            }        }        }    printf("sum=%d\n", sum);    double end = clock();    printf("Running time= %f", (end - start)/CLOCKS_PER_SEC);}</code></pre><p>reduction(+:sum)</p><p>冒号前面的“+”表示在各线程中sum要保留数据，计算结束后一起累加。</p><p>当然，OpenMP 不止能做累加，凡是累计运算都是可以的，如下表所示：</p><table><thead><tr><th>操作</th><th>私有临时变量初值</th></tr></thead><tbody><tr><td>+、-</td><td>0</td></tr><tr><td>*</td><td>1</td></tr><tr><td>&amp;</td><td>~0</td></tr><tr><td>`</td><td>`</td></tr><tr><td>^</td><td>0</td></tr><tr><td>&amp;&amp;</td><td>1(true)</td></tr><tr><td>`</td><td></td></tr></tbody></table><p>再如，为合理管理私有数据和公有数据，private命令可以声明循环的私有变量，这些变量在各线程中互相独立，互不影响，但是要注意，private不可声明static变量；</p><pre class=" language-CPP"><code class="language-CPP">#pragma  omp parallel for private(k1,k2)        for (k1 = 1; k1 < 100; k1++)        {            for (k2 = 1; k2 < 100; k2++)            {                cout <<"k1="<< k1 << endl;                cout <<"k2="<< k2 << endl;                cout << "k=" << k << endl;            }                    }</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近在编程时，由于涉及到大量for循环等遍历计算，需要了解并行编程知识，于是看了下OpenMP的相关教程；&lt;/p&gt;
&lt;p&gt;何为OpenMP?以下为百度百科内容：&lt;/p&gt;
&lt;p&gt;&lt;em&gt;OpenMP是由OpenMP Architecture Review Board牵头提出的</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>关于C++函数引用传递的一些心得</title>
    <link href="https://mrluo123.github.io/Mrluo123.http-github.io/2021/12/08/guan-yu-c-han-shu-yin-yong-chuan-di-de-yi-xie-xin-de/"/>
    <id>https://mrluo123.github.io/Mrluo123.http-github.io/2021/12/08/guan-yu-c-han-shu-yin-yong-chuan-di-de-yi-xie-xin-de/</id>
    <published>2021-12-08T11:56:57.000Z</published>
    <updated>2021-12-10T12:01:45.521Z</updated>
    
    <content type="html"><![CDATA[<p>最近在看别人的程序的时候，了解到一种新的函数写法。<br>通常，我么在使用通常来讲，函数通过形参接收实参的数值，并返回相应的结果，这种方式我么成为“<em><strong>按值传递</strong></em>”（pass-by-value）,这种传递方法并不会修改原始数值本身。</p><p><em><strong>但是，如果想直接更改正在被调用中的函数中的一个值，就可以通过引用传递的方式来进行实现。</strong></em><br>这种方法我们称之为“<em><strong>引用传递</strong></em>”(pass-by-reference)<br>　引用参数传递过程中，被调函数的形式参数也作为局部变量在栈中开辟了内存空间，但是这时存放的是由主调函数放进来的实参变量的地址。被调函数对形参（本体）的任何操作都被处理成间接寻址，即通过栈中存放的地址访问主调函数中的实参变量（根据别名找到主调函数中的本体）。因此，被调函数对形参的任何操作都会影响主调函数中的实参变量。（此处引用*飘剑如虹 *的博客，原地址<a href="https://blog.csdn.net/u013130743/article/details/80806179%EF%BC%89">https://blog.csdn.net/u013130743/article/details/80806179）</a></p><h3 id="什么叫引用传递？"><a href="#什么叫引用传递？" class="headerlink" title="什么叫引用传递？"></a>什么叫引用传递？</h3><p>当使用引用变量作为形参时，它将变为实参列表中相应变量的别名，对形参进行的任何更改都将真正更改正在调用它的函数中的变量。当以这种方式将数据传递给形参时，该实参被称为按引用传递。<br>为了指明一个函数的形参是按引用传递的，只需要简单的对函数原型的形参类型添加一个&amp;标识即可<br>例如：</p><pre class=" language-CPP"><code class="language-CPP">int &a//这里的a就表示一个int类型的引用</code></pre><p>为了让大家更清楚的认识到引用传递，这里举个例子：</p><pre class=" language-CPP"><code class="language-CPP">using namespace std;int add1(int a, int b){    int c = a + b;    return c;}//按值引用int a = 1;void square(int &a){    a = pow(a, 2);}//引用传递int main(){        cout <<"1和2加起来等于 "<< add1(1, 2) << endl;    int z = 2;    cout << "before reference 'z'= " << z << endl;    square(z);    cout << "after reference 'z'= " <<z<< endl;}</code></pre><p>输出：<br><img src="https://img-blog.csdnimg.cn/20191104113605236.png" alt="在这里插入图片描述"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近在看别人的程序的时候，了解到一种新的函数写法。&lt;br&gt;通常，我么在使用通常来讲，函数通过形参接收实参的数值，并返回相应的结果，这种方式我么成为“&lt;em&gt;&lt;strong&gt;按值传递&lt;/strong&gt;&lt;/em&gt;”（pass-by-value）,这种传递方法并不会修改原始数值本</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>虚拟机安装Debian以及配置SALOME教程</title>
    <link href="https://mrluo123.github.io/Mrluo123.http-github.io/2021/12/07/xu-ni-ji-an-zhuang-debian-yi-ji-pei-zhi-salome-jiao-cheng/"/>
    <id>https://mrluo123.github.io/Mrluo123.http-github.io/2021/12/07/xu-ni-ji-an-zhuang-debian-yi-ji-pei-zhi-salome-jiao-cheng/</id>
    <published>2021-12-07T14:01:42.000Z</published>
    <updated>2021-12-11T07:41:29.435Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="e6005b1f2fb5849c41d0bb8c0e7c7bd5139750a7152df04fa4379eecb33a3cb1">aab390a8541b3e94d7933e75be9829b022d4e22a0bd463bb1130a7edfaefc38c38c260a44167fc8fc4bed6d861ca7e36f1d033b908fc7503bfad484312e0e3826b15970dc9740641f665e20e77ba380300613782c12bb988410af7a5e98d009a2f9d02a91fd736d740d5d21f54ccd9d66314f349678d5b329c2c7a9ba37bcf7af4271bddbacc7b179b560a9fdc2b01d4305267c4413225f087ad9eab47953cc2ea1e5604c54ab3fd9d861722d0568519fbdf879cf690cad5ba7835e0dd6a9a5068d78f88293949ba668518a1781e0813904fe8ce0973df26761d20ddcf36e36477fa45d73041a8ce9484cb27809503ad6d29b1a6a1cec0b01c7967c24cf5693ed1398b137367caf03bb8c1d7f5ebe9ac43b67ce7281bd1c4b77957c6e847b33f15b19a360b80d5127a2c1acd7038c6b49d9247b8ce4059e431b1de23761f8c6449b967019c705f6c28cf9ca70422a69046900eb1441967dbce2606513a60231272271828e3b144610e2ae792a802fdbd956eb8f5568b7fa2c0f9c126eae084de39401bc164ba0e602f7e334bb8ad49bcd322638614462347ea85471d017b7a9773ed8e67c452be23e3ea19ea3c94a3f1277bdf04fdc5fb6d7726376ffe5196f4737502acd72d93211aa9ce745efe7c922a37f76c9c29d5cb5bc5f46f292570dbd63e03c0ea9d0377bfec783a963fa30f48d4fc4cdf867b04b58c4503dfba7b21cd726d3bf16869ed935c5f08634a89f83f0e695ec7249f37e94c45a24cf44ffbc5f5cf87ac23ea16c90897a6f22a08e33d7b395e9a3c76aa1cd052e1d35c082414930d6b6e3ca3652ec8ee95d8924ad76dafea53dcd0ca893f18aeefccbbca21fa0193d9f9337e3bf870d6494e62d2dcbd7406e01e82f152b5d2484494e5ff7954ef3a86e19b95c6b32c574ee9722fe2eb12909bbdf7a0447127b3465b780b5c107f20a4ca1dd0c2ef1e406e0d5d50688c49844e1a83b860759cee5a72cf5fc316d1971370bd618802eca7e022eb6b6ac3567b4b27123b729dfc296db2c201ab7ea37aa49146c023d75420ebe4271aa7f8809bbf726f77aa51648a093690e34cd65bac3dc943bcf1489b765f7a5f287125a7a721d9a4a351ef28e92b7b7190563b53e4dc7bec836ae6a4f0b0fc0fa420e8d26d1ad8e4cdd177c8a021f5e1fc7b59328f97946091494d34b114bcc4778662c6749441260d8b03dbae979d03c330a3bc30c66ae5bbfed75ae20c434bba83ddd0d7fa84d2d6f4e281f8b076deb3100f92a76dc96a22f46c224dd98fd079ad2df471fb4cee62004a84b9c5ee9cb676da01107e5115a87f4bb590607d096e1d90dde30505cabf545e6d511788c62117d2db85d690bc63b444aa660c3761f65eb7ea08663292ba118214e33d5584c7369fa2e4679831567f76772fc6c2f34a04b7a53a47fdf56dbf4ae4ff3412956a46449206e1b04d4e23f3a3c454d235f01b2c5bc974d07f60bb74bb119f47ccf867a14765d88a264477c90d492d7851038d4aa3dee37365652d306ba2da288c3dfd2840239e5b77a01454f781220c05bfa89b7ceccb7cd1be5290d7c9a2cb97f0c321d0bd687616043fcb9cb545ad239019265c8c92870b91873fae63c2aae1a4e02397896091a20e8b4f8964b8e9aec76c28f508065758237f5df65f4c0aef217eecbc5ee70067ed9b22105237790d0b66fbfab3c42ac345e5d8f3c811b57b7b900b5d3b3c3a1d6638a41276d2eee416325ffe36a1a4e2cf1d2f13df60c4dbaa4e56580b4eeee71467383dbb16c9799bac2f451a234ad6d21835065d1f1d4c57dd60c4b04a6b4169c1ac3a924cd7e1c1da594f38b33c0594f46cfee8994df94a2b83fe1e809d36335ada731d654b7064389cc00fd54b508bf968314c12bef9ccbea223b88386e39d633d797746c25c5f288ac2da1763ec7a6064d040eb2bdb47a43b235dcc588f8a2e251134da00c0bdd8c9a428fa56ac37203350f80ddd253dcb8a859457050e83d2f85fec204b46d84bbff485898ba5abb7422133024762f2192458185e52f2edf5065d45cfa5c5b69737b9d290d28abb01dc12baef4e8dd88f9bc9ea2bcc4f3df24434989194de2a3e14a22a044194e7ed4b04d06d851fdc4001812ff15a8de36f8bac7f232b6cf3a856e21340333d26eec59aae84fdf8fbec01a888602334b701110ebff27f50611b39fcf73c14db468967f2e859c94e331dfbf6e0f9694f11de0d40bd71125eede106a0f1dc81d3b8f9b8557dd6030e81c811d0f6b20d143301e0aa8a133d7ef396d96aa9af555da4f4999c6d6fa28924c3ba5218627a91d27901689d2a3170d88385af0f52e56d4269d54903298c6f74d7da04a5526419f3be838644764180e033838d7d5b69110044c0b44475185ea9fbe2ee6147037fe54c634bff58f0755b77868b896af4c8baa63d066ccd03c57d77e16818244616228b47edd12ae6581fa4b4e09baf409382389cf7cb59409cf6c4c78f5acdd524dcd168b0fd2ca2f08d8e845a8b16d9767ad03a771bccd90dfa9c5c4c9f3096f78bf0dba22d54c30b1a443dfb905c6953c3011c2345c7fccea34df14e4d71b34c234c7fb95372d4c4b1eb251f5e51bf9b26604e6dd59d7aea0abb16ca583e3b883be17e36b2e5a4349120587453ee34fca577d8a0e99ad0ad171ae6bf123b5fed46fdd59a7fea404e075f63a024747f452bca2f6822e1bd01dde0942c9ee2abb7fe36b3165d68d2ac42b59c866acfb273e96b743cdff8231b03cba09bdf59a053cb754b3c3ffa4dd1b8e9fd8d97e002dc26f1c273de180b9629ac3f8fc38ea75280c61d80734a40b83c11cdd58dbcd2923be2651bd7e3a18f3e2f4c49fc963b216b1b9a08358714efed71d5f9c1e6b74587a67e6c12612b3e302de05a976aab9114b98f8e3839110786dd8e96168b81b5745b8ca2905ef052f54e162a7910e229861a3313018d7dfeb61032ad21075f640c1b6a5d7c21335a1b168c8623c694a486cef85075818102b1ac0cff1185dcd3c9fdc59cd4edfe480c39ab06b3c7b34dbd4915726bf2941244fc5b99cc52116dfd174ad70401cfd58463931c5e7169d38d3d49495e50cdf2da66b688c7aadbe4730b03b75310e2685d9eb554f1a71d43a0d5bd3656adfd6ba53f6a5a34a08ea78a8e7ab653b8d6d9bf74b9dc85a25ad99555704a0dbc9f27259b0d5d838de582ee3b713e19b3df9bead556e10176906dfeae333e0c8ed5435df1f83d24b8ac0ee0f6f55214ad05f307ef62cec24d233f5230924e22fa37682c970db1c24d65c0683a75a7ec09e39f312d24b0d721bf3b0d9a9822fd291a8475428fea7efa859b9b33f8ee1a9605fd49e8d0aec2bf0a03185b5d7220451360b22d6b4da1f7f6aceb0473b4f7c30579dafde6ed4f75bbc14db86227aaae18b93c10b6b817ffb750b5971a210fa05d5eb42c502c31703f94c32265dc45e7ff480c1f96f0aca76d62ec46dff0dd9b544c7507a3d180513f62a949f5ad2c0fc8da4f52911a0a9da063083c1a088a925b0c024dbf0a21531612dc1e0834d1871037b91440aac3f5358b7ce084a917aefbee9c5e0fbf4725ff84768e65f8c518f1a4265d77ad9bb070d92355bdbd3d807aeca39929385321756bfc36920d57fac34711a1942ea1b9b73890c594f2bd20dc7dbd300c7c02fbb114e7b467d4f60ed2bc746dc77da4af75b8217eef2e58f3c8794e68ef314f7a918c2e5de33e41dd5e82898047b34a6ec338ade8072a8973f2e280248595ab27f316cc649a36a09640fe5b74f5275e85a3d0273a2b64d6864c40bc152778dcee2604a64f0eaa39a95d1c29e661083acd4ee2b5f9de3ca0e504fc768a2ef08dfa2fd29690c4e7b5fe1878b0a0371a8719b1dd5bf64b2afc3fbf9bdf8d0ef3a6087137efc3588758c1d5e12b02288395fce8de1ba70a475c33b3b6300242b1e2becb21bba91397688df50fb6b0b1ae0b5c701713419118bf1c7702472342c496ba32c4031f5df8fcd44fcb47282da11480c60631c10f647732b86e489aaec60898d4bcf93e74d21a1ec15ed22472db6805d0d6b0ad87127346f2ef9d46cbbab5322b3ad5a6ade666d7d53bb9f4cf753f6116df3f337a78eaa8fd84cf74e79e8506d60b14ed2c06c602a8473d39b8c0243da830d048ccd84b58419d4e2761e5fbf12cec0436680201b636aa1dfa4c36a040ef98f30eb63608237ca5ee4ed377560fa8e83049e6ce9182cbefd88ebc2dc772a4d7d8b4fe2ed25c81647f23c5f16a7f87d6a442f0da35a2232af2882bcf81d2ed9a81ea46fd9fe28cc6e042ee9e3fe844a3ec697bf5b425642fe1ccee9060423261dea6e8ef1b8a4af5eb95419fc0f42d820839240c4fdef809d36b0d00480f20fac54af0d5017dfd35040aace18cdee07a5b82de22175467a0a4d21b16a1aeefb1a47a4ded5822cef7871003f2dbdd6124470cb565aaaa10a219c40e4bae7d56e336d74270f7051dcf03bd3600dfe67b32ac079a5eafce4ccc3efa300ee6c15cc0edd976d99f94702efe6a876eac9e45bf30e0e248922bc5e6f4290d6319f82616c7b9a2a108152857d1688ac1e257d05550dbffcbb2eeba916d561133a784b32ee59ac9eaccadc9b24982545603c4e58b625d9bb28efaa1dc1f98e88f995f27bf57d02171c11787de654dec38e655964720d3c54cc69c2ac82fa580e094fff827ad95d6dd6166284adbe6f0c4d5733a7827113b4dad170d28bc89c604f942562eb7e6c9cd60800f0f48721b9ec438de0e042d58ea31d707342cd20d3a0a3b0c42a074b2e0d4a5e98823efeaf1f9dbcb6422ec940cbbd3c737976aff8ed9fe1cc479ef883207be789c39a84fb53a12ad3926cf9b1cd900d0d387ace5596575c98d3f94abcf784e8529c3353d812458cd91bd85ca2bdc13295559e96b9253703b8ab41a9333020e86d90628056aac55f6866d5e9ebc42c76660128ad484eab95632e77737648643d66921ae98d7485d4a9de37f3d1bcbf76d64f3685dd72738bf90932ca82da2d889bc1fd4480952a39f4503b91a4ad9e77cd993af3e68fb3c117bbf39bc0ad2d08337156685e5bf847339f1ed12530993c98df517af260813710ac2e6eaa8e81db70c915e2f1e456281a52d0594ca2544e70fa46440d77968d2eb70f6da32d3d94c77594a8c1eac8a2d14148be3e81ccf37c233e5a9ba19635980af2a746f577164b9f95b3ef24e6bd9e39adb0ae7e5c31acf121fa7cb70ac15cbc98107ec5fcee715003186d9eaee8672185af2ea2acd1a6049d8c3c990144712ad8994695d43738c42f20c2e1ba931e50d78cc6f77826e3972eb86becb70ac35fb5b947906c21435a8508e330c8e7dcd8a388c3048b81b14b7f69efa803d0bb630e1c025f3855a6631c69a36c4d4880d943dfb1db80b2313a5669126f71937e7c5f2496c14bb5edd9fcc81b3ff69dc0d51bb8681554f2953e0eff4e9c56bf8c6a7b11f750f68d7ac38ed5304ad47aa5328c4fc8fc6824417372e750bca7a4952faed26ffc442bc4fd56315f402fb93199f74f690778c2639e843fd736d6d339406ee448b87fd81279e50095c6dabb63eddac5f726bbc71092f2e41c2caf35e7e5c163e4f917eb7493db4bd4ff2f302c6d95ce28e974f430f280d986d5c14c88a107fa71eae939b3b57507589d1afa6bd92c4ed932168291e7b2d1674ed0a712b471fdf6b035c123987a20e0e125d8e6d518c559acfad554f0f41aefb6ce66a99e10ec4a2928dbea173fd8c8212f670f8f1efe65e6e5d97919e86a4e2efe7a9245a2b7b05c6689a64d2a3f23f3d82668f17d64eb90858f1f5e1157380d53c25ffd9f50a35ead52e15046493289e1abe2c7f3147a8c1c00095d3f10c0813e39769acb590ec0cd1614326443de86aacb6b108f1b966b3b1a5a4c5c097eeed76eb1237d4635730e6926bdaff11958d3384a8a8d3a5b9e56d2be84056c92b262199cc2f5b693023de6f33f1e6bc15aa691d6636eb601aa8c1a0174062314e860e9bba9d8506c12c6c397115e06db48db5a78ab62a161e29d47613836c7e9c8b6b6944c55763fcbebdf068a0d51c50c5b38b730a43012f7076b6feb64c6530c45ec927ae366fa57d562de9d18f0a38dfb28ff5ba663f70bdd8bd903780703ecad6d0ad494e4bac751aafda96765472bd02c47ca82e7b3520e1d99e3746c990cbccf5c5cfb8a1e1c909730c2982272cd3a30a49c58bed24d71778cffe9bdb85a7aee76120a818849f188d183ec8487405869b645b9fd19ef56b915149431040a9184e94953dbc29a362d9c492cc8e72396ae43505880ec3a762a3a58ea3fcce25fba4b8e799694d481ca172484d66d0bb0dd1b029f597db2c91d928a5a791fef445c39bdc5b99fa6d46e362c4193f4833ac76d0daf42f6ee4733afc4d6b3a09743c583e854d7427fef8dbb163d43e82e91618111b60c946cf8e02f0c2f1afb9d2767bdc5b9589849564cb532d1b0875f867ab68ab266abc0ea0ac58f668cda43719ee73c20efcbdb21aa7231d5cbc00838d77da6e3af3c2f307265346431d3ab159d2fb6f4eadf98194da8ef6deafdaedb5d8828e78300657fd16993fc4a9a8ea031b9736a66d8b5ceae7d33101d3369c75919aab9102e7767e9230e0e174c64918e1cb561463724306a775ac572fef0ddb795f979a2b95460c17f1b5ab36a35ca4eab10e8997075f1e2419529749284c445e9c4be7c0cb62a92c092895414ced95a9226515ba4860f657f11387d6a4ea37a9cc3418787c2127a0bd84372c114cb8a890a66e678d2610e05919290d95cf0a45f346ec7e4d6f93327e76fc23b7669155b9e1909ff623aef3af7725c5284ab4c1036d8ed9fc8810e1cde6c5c9c5e4d8a3eaf875b02d839e798ca8e0763aac7d51cd9c75ad69650112adc9f4800bc10d426d77b8ad836d863f2d93620aeed7837bd6d3af703b7875206ba14077e3516a25fe1ad1943305edce94f6db93b0f413d6f3cd72510f339e768ac62adece02b17953a9295752a516a1ad26e08119cf3172513c36c5d44c8b22fd2cc8c248c6c4b40620501eca735eda54379f8fa26a5952fd09780116957dfa6dafd4499c7f6ae32f6f30f22ca01a9d5f8ce813f493f2ef759577d464570b9d70e1c41654e0ea2253d516ca2861adebab4b91ac55844810e7dc7d32d0f2285d03f4cd54c46ae4502d93f91426f6b30b91128f3c21bc0b49039d52acb10f037e9ee3fcc92a80a25281df5055e55fac349fec8719590dcd80b6e193cba43671e869be9e2d77148e55b40bbeaa1816f9facb7320be4f069bff425da6fea95a458a987ce29f93ac0591f7ee6200b19e837e541906d5b3f9b9eef807db31f8d2cd89d3b4677b978e296ac09a066a589bf6c45e2a5f83e7dfdd6b73fcacfd7c07bc75ba322983a5bea1ba904e833266b0fb18995a52563cc0e24b4260ef60a81866db44f72d274b43828373558f1a735bb9214d200397536a90027e42e0a0e8da93c946f3564307be159390cd96535b925255be459f4b865b0b22bf8497f39b5d7eb09290c9a322f93569f088d904c72e903a3ecc7c3048b2caeca13aee490e78f8f4f21406a19dac14d5602d02c5506bbbc4be7cd0162d20116885ae887b67471ec8ddac385ce1e5d3b161ce9a94e8111bdb66a8241aee88bb0665d98914d5068de8977bbecfce29a8da4dce28bacfb3fb42ee876027000b768b4c62d6c5ee8b34a79309844420b409074549d5264fdddc1c7dfafd1f789d316a1d1cdf16be02cfd680983f0df51284536e30a31c5074826f27c1d871f6a8765ce4d178d285f1aa4093c6a200b4a7c0aa1ee09f96587e5d79ba4e6f6de0914ec213b7c3a19cfff4f6541a11e45e14057d0a34a3e58ae29e52c69bf95bd89933d3ddaf371b6865c1473062ddc140b0e8e340aadd84f06bf0379a7fcfd581742a22a8e0be6361315469ec295ce0b6de5912f385aa79590278eb991b78e0635236abc3b2236cd8ff51ffdbeba12d72c3589217c80798871925402dc037ace790ee20263eb719522faf8582abfc25f247855d865e822695db79133c3df57f33a4a7347dce068c9ee2bda45b921a2ed3105e1b41210942bf7c691598bfddc4456a90c2b8bb49f91ddb314bba6769d7b2b84f1e8081c9dbfb22d1e4ba39268bd358676f867b8b5184b51ea947e46c033350e2d013b2c729e60ee1ec699f8597fb64a2daf3ede10ee6bca572480c44da0338b6c836f6f338f4b974127a0b1b95331caedaf330a09da257f81e7971a690c99b29d449efc5d9dbbf457940de19aadc26448b50665a425a2b1409d60829d972f08f3af630a1ec6048ff17fe6167c9f16912367a3bee908fd8985d3ea7ecd773be3a1762401dd23c784db68d7469759e963b332fa409d054b8ebca7d9cfe995f81c241fb31c3b59639e79b6592d8a0932575840c7dd9771cddda0e0552d7353e02a8605ae299d52747de37d38b0bf7563142aa2d01abf4aecd27636dcc3674c9e44a92f263808d89cf091251e000c5b2da6c3334151f8e9394ff9ba92bd855cd6166277a854dd6877893be11dca6f779ce37daf5c4357db4bde77db2735f5cfc8d867b2a52efb104dbd71b149349fe7ac8aa732377b3502d2c1f1d9b2d188cc74e6dc883950d5e9a242f5f248ec00f8d48bb509814c57a8c9fe1af72175c1fa18238460c59e508bad2722ef5a107b430cf7d82acbb8d72486de3e97698b26bdcb9b9845ea7b6ccbbfad38e6211e75cc7ab32f584ba2ef6c63e3be606a37d1357b64b88406265eb40fd9dc9bc1b49e6039f08d6aa77ab98a4071ed7628e076e4eb534c74975baf122ecfa6ff3878ed1ea4c3b9387922381442ecea6f8b4a7e18f222620dfd28223a87b1e4237a2e16daf43f64af19e06f6093f2a2214a239942624054a5005e8e77037492fac465e4426f73249a9ee7746e3332a004f1057a3e83fd966ec81e6bd1698eff6959d1cd911cc510ed85f27ef4201da5ff57525a2eb5abca53ba3293935c9fbcd55b9905c010e80eddf46ec14f371ad5403b78ae0dd144ab1dc02d2459f9d4f600de272b4a2baf9ed7da0f0decc38a39a8ad02b7b9bdfe7cfea6a09e4b2ed2be9fc6d3565e41a318b3c9f1c6e7b234662128b0d34c40fb906cd44e9aeee7c714c9ee5d8a85f5cfa0d2c2f521cc88c82b85cf4f090c98a801fccc125e4399dc25e7e2d9da238eac524d722d5249368c1270b44c15da826f97a23cd8509f64976a96ff4ff0acfc24d99a1ce0deda32cb5285b792b0612c9d72932efd5b106a45c44b9fb6073a87cbd80a8bc0ff42fd5c70a7aad71eb93370151ba2c48b7c9648e72166ca4c622a605ff3292ea76582fa1c5ac45eae3d418b4fd03b7a0a12f75403532022f294c5dc5e381de7e26f0abe78ebc539a9b743690ec978763ff2db6f538bd48ea5e7d8a34de241b9872ba4f74e9a3d238e0d607afcb1cf2d88564a14702e42b7eeb97e1a380fcf73cb80ebcf02694f6e1c2195ae539774ad28ba6e0a3b4a51e923f9ffa55055b5afe5bb12f1afa2d3ae89048dfb98c917f6468f64c0b3c9f70c976dd2a6804bea7506e3cacce436ac45daba71019c3c34caaa57e0a9dfa686bc3601bcb0c1d200ce8afd7ec84a6bf7090f875a9774fd39a9aa33ac2f6a43e37f4ed84586a98084885435314b8d65e01c24128c26955bcf63801cb74d1cf1eeecb6bc1074f150f52c73d565a6e1e1203642fa2aa6e282e3eaca54711480b3459f57e795eb7db889be30043d85148e2854014fc2a5764c93dfe5052f752d1adc6209ff7f5e395cddfa5641a4d902229dfb686fd5d3d788c77c0ab3f85f815d5fd4d44be1c17a30c417a26f9c15deb5b256619ee95863c82bade8b76037ba1b1e3a4a3bde4460b391e9bbb2b7dd9309e2de0ec032569dc359b0efee255d277962772db3909687ad8cb3e523cc16176ed9b63af925e6e8b369642d673f3c46bb40bbd</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 请在这里键入本文的阅览密码.</span>      </label>    </div>  </div></div><script data-pjax src="/Mrluo123.http-github.io/lib/hbe.js"></script><link href="/Mrluo123.http-github.io/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">本文被加密了, 请输入密码查看.</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>一个例子告诉你C++引用和指针的区别</title>
    <link href="https://mrluo123.github.io/Mrluo123.http-github.io/2021/12/07/yi-ge-li-zi-gao-su-ni-c-yin-yong-he-zhi-zhen-de-qu-bie/"/>
    <id>https://mrluo123.github.io/Mrluo123.http-github.io/2021/12/07/yi-ge-li-zi-gao-su-ni-c-yin-yong-he-zhi-zhen-de-qu-bie/</id>
    <published>2021-12-07T11:54:56.000Z</published>
    <updated>2021-12-10T12:01:45.524Z</updated>
    
    <content type="html"><![CDATA[<h4 id="C-引用vs指针"><a href="#C-引用vs指针" class="headerlink" title="C++引用vs指针"></a>C++引用vs指针</h4><p>引用很容易和指针混淆，他们之间有三个主要的不同：</p><ul><li>不存在空引用。引用必须连接到一块合法的内存。</li><li>一旦引用被初始化为一个对象，就不能被指向到另一个对象。指针可以在任何时候指向到另一个对象。</li><li>引用必须在创建时被初始化。指针可以在任何时间被初始化。</li></ul><p>例如：</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token operator">&amp;</span> r<span class="token operator">=</span>i<span class="token punctuation">;</span><span class="token keyword">double</span> <span class="token operator">&amp;</span>s<span class="token operator">=</span>d</code></pre><p>第一个声明可以读作“r是一个初始化为i的整型引用”，</p><p>第二个声明可以读作：“s是一个初始化为d的double型引用”</p><p>此外，通过一个例子就可以发现：</p><p>引用者的内容和内存都和被引用者保持一致。而赋值的话不是这样，只是内容相等，会另开辟一个内存地址来存储。</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">"pch.h"</span></span><span class="token comment" spellcheck="true">//预编译头文件一定要放在最后面</span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">float</span> b <span class="token operator">=</span> <span class="token number">1.234</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token operator">&amp;</span> c <span class="token operator">=</span> a<span class="token punctuation">;</span>    <span class="token keyword">int</span> c1 <span class="token operator">=</span> a<span class="token punctuation">;</span>    <span class="token keyword">float</span><span class="token operator">&amp;</span> d <span class="token operator">=</span> b<span class="token punctuation">;</span>    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"c的值等于"</span> <span class="token operator">&lt;&lt;</span> c <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"a的内存地址为"</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">&amp;</span>a <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//&amp;为取地址符</span>    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"c的内存地址为"</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">&amp;</span>c <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"c1的内存地址为"</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">&amp;</span>c1<span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"d的值等于"</span> <span class="token operator">&lt;&lt;</span> d <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>结果：</p><p> c的值等于1<br>​ a的内存地址为0104FC38<br>​ c的内存地址为0104FC38<br>​ c1的内存地址为0104FC14<br>​ d的值等于1.234</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;C-引用vs指针&quot;&gt;&lt;a href=&quot;#C-引用vs指针&quot; class=&quot;headerlink&quot; title=&quot;C++引用vs指针&quot;&gt;&lt;/a&gt;C++引用vs指针&lt;/h4&gt;&lt;p&gt;引用很容易和指针混淆，他们之间有三个主要的不同：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不存在空引用</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>C++用流函数进行格式化输出</title>
    <link href="https://mrluo123.github.io/Mrluo123.http-github.io/2021/12/06/c-yong-liu-han-shu-jin-xing-ge-shi-hua-shu-chu/"/>
    <id>https://mrluo123.github.io/Mrluo123.http-github.io/2021/12/06/c-yong-liu-han-shu-jin-xing-ge-shi-hua-shu-chu/</id>
    <published>2021-12-06T11:59:03.000Z</published>
    <updated>2021-12-10T12:01:45.519Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1、setf"><a href="#1、setf" class="headerlink" title="1、setf"></a>1、setf</h4><h4 id="stef是set-flags-设置标志-的缩写。编制（flags-是以二选一的方式来做一件事情的指令。"><a href="#stef是set-flags-设置标志-的缩写。编制（flags-是以二选一的方式来做一件事情的指令。" class="headerlink" title="stef是set flags(设置标志)的缩写。编制（flags)是以二选一的方式来做一件事情的指令。"></a>stef是set flags(设置标志)的缩写。编制（flags)是以二选一的方式来做一件事情的指令。</h4><ol><li><p>ios::fixed 不用e计数法来表示浮点数</p></li><li><p>ios::scientific 用e计数法来表示浮点数</p></li><li><p>ios::showpos 始终以浮点数显示小数点和尾随的0。如果不设置此表示，而且一个数字在小数点后全是0，那么他在输出时可能既没有小数点，也没有尾随的0。</p></li><li><p>ios::right 在使用成员函数width()来设置域宽值后，输出的时候会按照区域宽度来右对齐输出</p></li><li><p>ios::left 在使用成员函数width()来设置域宽值后，输出的时候会按照区域宽度来左对齐输出</p><p>例子：</p><pre class=" language-CP"><code class="language-CP">#include "pch.h"#include <iostream>#include<fstream>#include<cstdlib>using namespace std;int main(){    float a = 0.00;    float b = 1234567.23;    int c = 10;    cout.width(50);     //设置输出域宽为50    cout << "Peter is a hansome man" << endl;    cout.setf(ios::showpoint);   //显示小数点后面位数    cout << a << endl;    cout.unsetf(ios::showpoint);//取消上一个格式化输出    cout.setf(ios::scientific);//科学计数法输出浮点数    cout << b << endl;    cout.unsetf(ios::scientific);//取消上一个格式化输出    cout.setf(ios::fixed);//直接输出浮点数    cout << b << endl;    cout.unsetf(ios::fixed);//取消上一个格式化输出    cout.setf(ios::left);//靠左输出    cout << b << "    "<<c << endl;}</code></pre></li></ol><h4 id="2、setw"><a href="#2、setw" class="headerlink" title="2、setw"></a>2、setw</h4><p>操纵元函数setw()和width()类似：</p><pre class=" language-CPP"><code class="language-CPP">cout<<“strat”<<setw(4)<<10;</code></pre><p>输出： 10；在10前面有两个空格，因为是4个域宽输出的。</p><h4 id="3、setprecision"><a href="#3、setprecision" class="headerlink" title="3、setprecision"></a>3、setprecision</h4><p>使用<em>setprecision</em>(n)可控制输出流显示浮点数的数字个数:</p><pre class=" language-CPP"><code class="language-CPP">cout<<setprecision(2)<<10.4<<endl;</code></pre><p>输出：10.30</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;1、setf&quot;&gt;&lt;a href=&quot;#1、setf&quot; class=&quot;headerlink&quot; title=&quot;1、setf&quot;&gt;&lt;/a&gt;1、setf&lt;/h4&gt;&lt;h4 id=&quot;stef是set-flags-设置标志-的缩写。编制（flags-是以二选一的方式来做一件事情的指</summary>
      
    
    
    
    
  </entry>
  
</feed>
